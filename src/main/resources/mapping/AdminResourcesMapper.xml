<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.admin.dao.AdminResourcesMapper">
    <resultMap id="adminResources" type="com.sp.admin.entity.authority.AdminResourcesEntity">
        <result column="id" jdbcType="BIGINT" property="id" />
        <result column="source_pid" jdbcType="BIGINT" property="sourcePid" />
        <result column="source_type" jdbcType="INTEGER" property="sourceType" />
        <result column="iconfont" jdbcType="VARCHAR" property="iconfont" />
        <result column="source_name" jdbcType="VARCHAR" property="sourceName" />
        <result column="source_url" jdbcType="VARCHAR" property="sourceUrl" />
        <result column="source_function" jdbcType="VARCHAR" property="sourceFunction" />
        <result column="enabled" jdbcType="TINYINT" property="enabled" />
        <result column="source_order" jdbcType="INTEGER" property="sourceOrder" />
        <result column="is_lock" jdbcType="TINYINT" property="Lock" />
        <result column="version" jdbcType="BIGINT" property="version" />
        <result column="when_created" jdbcType="TIMESTAMP" property="whenCreated" />
        <result column="when_updated" jdbcType="TIMESTAMP" property="whenUpdated" />
    </resultMap>

    <select id="selectAllResources" resultMap="adminResources">
        select id, source_pid, source_type, iconfont, source_name, source_url, source_function, enabled, source_order, is_lock, version, when_created, when_updated
        from admin_resources
    </select>

    <select id="selectAllEnableResources" resultMap="adminResources">
        select id, source_pid, source_type, iconfont, source_name, source_url, source_function, enabled, source_order, is_lock, version, when_created, when_updated
        from admin_resources where enabled = 1
    </select>

    <select id="selectAdminResourcesByAdminId" parameterType="java.lang.Long" resultMap="adminResources">
        select
            resource.id, resource.source_pid, resource.source_type, resource.iconfont, resource.source_name, resource.source_url,
            resource.source_function,resource.enabled, resource.source_order, resource.is_lock, resource.version, resource.when_created, resource.when_updated
        from admin a LEFT JOIN admin_role r on a.role_id = r.id
                     LEFT JOIN admin_role_resources rs on r.id=rs.role_id
                     LEFT JOIN  admin_resources resource on rs.resource_id = resource.id
        WHERE a.id = #{adminId}
    </select>

    <select id="selectAdminResourcesByRoleId" parameterType="java.lang.Long" resultMap="adminResources">
        select
            resource.id, resource.source_pid, resource.source_type, resource.iconfont, resource.source_name, resource.source_url,
            resource.source_function,resource.enabled, resource.source_order, resource.is_lock, resource.version, resource.when_created, resource.when_updated
        from admin_role r
                     LEFT JOIN admin_role_resources rs on r.id=rs.role_id
                     LEFT JOIN  admin_resources resource on rs.resource_id = resource.id
        WHERE r.id = #{roleId}
    </select>

    <select id="selectAdminResourceByAdminIdAndFun" resultMap="adminResources">
        select
            resource.id, resource.source_pid, resource.source_type, resource.iconfont, resource.source_name, resource.source_url,
            resource.source_function,resource.enabled, resource.source_order, resource.is_lock, resource.version, resource.when_created, resource.when_updated
        from admin a LEFT JOIN admin_role r on a.role_id = r.id
                     LEFT JOIN admin_role_resources rs on r.id=rs.role_id
                     LEFT JOIN  admin_resources resource on rs.resource_id = resource.id
        WHERE a.id = #{adminId} and resource.source_function = #{sourceFunction}
    </select>

    <select id="selectResourceByIds" resultMap="resources">
        select id, source_pid, source_type, iconfont, source_name, source_url, source_function, enabled, source_order, is_lock, version, when_created, when_updated
        from admin_resources
        where enabled = 1 and id in
        <foreach item="resourceIds" index="index" collection="resourceIds.split(',')" open="(" close=")" separator=",">
            #{resourceIds}
        </foreach>
    </select>

    <select id="selectResourceById" resultMap="resources">
        select id, source_pid, source_type, iconfont, source_name, source_url, source_function, enabled, source_order, is_lock, version, when_created, when_updated
        from admin_resources
        where id = #{resourceId}
    </select>

    <insert id="insertResource" useGeneratedKeys="true" keyProperty="id" parameterType="com.sp.admin.entity.authority.AdminResourcesEntity">
        insert into admin_resources(source_pid, source_type, iconfont, `source_name`, source_url, source_function, enabled, source_order, is_lock, version, when_created, when_updated)
        values(#{sourcePid}, #{sourceType}, #{iconfont}, #{sourceName}, #{sourceUrl}, #{sourceFunction}, #{enabled}, #{sourceOrder}, #{Lock}, #{version}, #{whenCreated}, #{whenUpdated})
    </insert>

    <update id="updateResource" parameterType="com.sp.admin.entity.authority.AdminResourcesEntity">
        update admin_resources set
        version = version + 1
        <if test="sourcePid != null">
            ,source_pid = #{sourcePid}
        </if>
        <if test="sourceType != null">
            ,source_type = #{sourceType}
        </if>
        <if test="iconfont != null">
            ,iconfont = #{iconfont}
        </if>
        <if test="sourceName != null">
            ,source_name = #{sourceName}
        </if>
        <if test="sourceUrl != null">
            ,source_url = #{sourceUrl}
        </if>
        <if test="sourceFunction != null">
            ,source_function = #{sourceFunction}
        </if>
        <if test="enabled != null">
            ,enabled = #{enabled}
        </if>
        <if test="sourceOrder != null">
            ,source_order = #{sourceOrder}
        </if>
        <if test="whenUpdated != null">
            ,when_updated = #{whenUpdated}
        </if>
        where
        version=#{version} and is_lock = false
        <if test="id != null">
            and  id=#{id}
        </if>
    </update>

    <delete id="deleteResource" parameterType="com.sp.admin.entity.authority.AdminResourcesEntity">
        delete from admin_resources WHERE id = #{id}
    </delete>

    <delete id="deleteRoleResource">
        delete from admin_role_resources
        where resource_id = #{resourceId}
    </delete>

    <resultMap id="resources" type="com.sp.admin.entity.authority.AdminResourcesEntity">
        <result column="id" jdbcType="BIGINT" property="id" />
        <result column="source_pid" jdbcType="BIGINT" property="sourcePid" />
        <result column="source_type" jdbcType="INTEGER" property="sourceType" />
        <result column="iconfont" jdbcType="VARCHAR" property="iconfont" />
        <result column="source_name" jdbcType="VARCHAR" property="sourceName" />
        <result column="source_url" jdbcType="VARCHAR" property="sourceUrl" />
        <result column="source_function" jdbcType="VARCHAR" property="sourceFunction" />
        <result column="enabled" jdbcType="TINYINT" property="enabled" />
        <result column="source_order" jdbcType="INTEGER" property="sourceOrder" />
        <result column="is_lock" jdbcType="TINYINT" property="Lock" />
        <result column="version" jdbcType="BIGINT" property="version" />
        <result column="when_created" jdbcType="TIMESTAMP" property="whenCreated" />
        <result column="when_updated" jdbcType="TIMESTAMP" property="whenUpdated" />
        <collection property="childResources" ofType="com.sp.admin.entity.authority.AdminResourcesEntity"
                    select="selectResourceByPid" column="id"/>
    </resultMap>

    <select id="selectResourceByPid" resultMap="resources">
        select id, source_pid, source_type, iconfont, source_name, source_url, source_function, enabled, source_order, is_lock, version, when_created, when_updated
        from admin_resources
        where 1=1 and enabled = 1
        <choose>
            <when test="0 == sourcePid">
                and source_pid is null
            </when>
            <otherwise>
                and source_pid = #{sourcePid}
            </otherwise>
        </choose>
    </select>

    <select id="selectResourceUseCount" resultType="HashMap">
        select count(resource_id) usecount
        from admin_role_resources
        where resource_id = #{resourceId}
    </select>

</mapper>